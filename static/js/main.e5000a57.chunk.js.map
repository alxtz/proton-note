{"version":3,"sources":["App/loading.svg","App/Note.tsx","App/DisplayNotePanel.tsx","App/utils.ts","App/index.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Note","styled","div","props","disabled","title","markdownSource","mode","cachedMdSource","setCachedMdSource","cachedTitle","setCachedTitle","onSave","onDelete","onClickEdit","onClickView","htmlStringFromMd","marked","Container","Title","TitleInput","value","onChange","e","target","Render","EditTextarea","className","dangerouslySetInnerHTML","__html","BottomBar","ViewButton","onClick","EditButton","input","textarea","button","wait","delay","a","Promise","resolve","reject","setTimeout","encrypt","data","decrypt","App","contentToRender","useState","setMode","loading","setLoading","currentNoteId","setCurrentNoteId","defaultNotes","noteItems","setNoteItems","decryptedMd","setDecryptedMd","editNoteById","noteId","stateNotes","chooseNote","then","decrypted","undefined","Empty","Loading","src","loadingSvg","DisplayNotePanel","mdValue","titleValue","encrypted","newNoteItems","deleteNote","Header","NewNote","newNoteId","uuidv4","createNewNote","Main","ChooseNotePanel","Object","entries","map","id","item","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e5000a57.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.243f40f0.svg\";","import styled from \"@emotion/styled\";\n\nexport const Note = styled.div<{ disabled: boolean }>`\n  border: 4px solid black;\n  border-left: 0;\n  border-right: 0;\n  flex-grow: 1;\n  display: flex;\n  padding: 10px;\n  cursor: pointer;\n\n  &:first-child {\n    border-top: 0;\n  }\n\n  &:not(:last-child) {\n    border-bottom: 0;\n  }\n\n  &:hover {\n    background: cyan;\n  }\n\n  ${props =>\n    props.disabled &&\n    `\n    opacity: 0.2;\n    pointer-events: none;\n    background: white !important;\n    cursor: default;\n  `}\n`;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport marked from \"marked\";\n\ntype Mode = \"view\" | \"edit\";\n\ntype Props = {\n  title: string;\n  markdownSource: string;\n  mode: Mode;\n  cachedMdSource: string;\n  setCachedMdSource: (value: string) => void;\n  cachedTitle: string;\n  setCachedTitle: (value: string) => void;\n  onDelete: () => void;\n  onSave: () => void;\n  onClickEdit: () => void;\n  onClickView: () => void;\n};\n\nexport default function({\n  title,\n  markdownSource,\n  mode,\n  cachedMdSource,\n  setCachedMdSource,\n  cachedTitle,\n  setCachedTitle,\n  onSave,\n  onDelete,\n  onClickEdit,\n  onClickView\n}: Props) {\n  const htmlStringFromMd = marked(markdownSource);\n\n  return (\n    <Container>\n      <Title>\n        {mode === \"edit\" ? (\n          <TitleInput\n            value={cachedTitle}\n            onChange={e => setCachedTitle(e.target.value)}\n          />\n        ) : (\n          title\n        )}\n      </Title>\n      <Render>\n        {mode === \"edit\" ? (\n          <EditTextarea\n            value={cachedMdSource}\n            onChange={e => setCachedMdSource(e.target.value)}\n          />\n        ) : (\n          <div\n            className=\"markdown-body\"\n            dangerouslySetInnerHTML={{ __html: htmlStringFromMd }}\n          />\n        )}\n      </Render>\n      <BottomBar>\n        {mode === \"edit\" ? (\n          <>\n            <ViewButton onClick={onClickView}>Cancel</ViewButton>\n            <ViewButton onClick={onSave}>Save</ViewButton>\n            <ViewButton onClick={onDelete}>Delete</ViewButton>\n          </>\n        ) : (\n          <EditButton onClick={onClickEdit}>Edit</EditButton>\n        )}\n      </BottomBar>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  flex-grow: 1;\n  flex-shrink: 0;\n  flex-basis: 0px;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Title = styled.div`\n  border: 4px solid black;\n  padding: 10px;\n  font-weight: bold;\n`;\n\nconst TitleInput = styled.input``;\n\nconst Render = styled.div`\n  flex-grow: 1;\n  display: flex;\n  padding: 10px;\n`;\n\nconst EditTextarea = styled.textarea`\n  display: block;\n  flex-grow: 1;\n  font-size: 18px;\n`;\n\nconst BottomBar = styled.div`\n  border: 4px solid black;\n  padding: 10px;\n  font-weight: bold;\n`;\n\nconst EditButton = styled.button``;\n\nconst ViewButton = styled.button``;\n","const wait = async (delay: number) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, delay);\n  });\n};\n\nexport const encrypt = async (data: any) => {\n  await wait(1500);\n  return data;\n};\n\nexport const decrypt = async (data: any) => {\n  await wait(1500);\n  return data;\n};\n","import React, { useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { Note } from \"./Note\";\nimport DisplayNotePanel from \"./DisplayNotePanel\";\nimport defaultNotes from \"./defaultNotes.json\";\nimport { encrypt, decrypt } from \"./utils\";\nimport loadingSvg from \"./loading.svg\";\n\ntype NoteIdObject = {\n  title: string;\n  markdownSource: string;\n};\n\ntype NoteItems = {\n  [key: string]: NoteIdObject;\n};\n\nfunction App() {\n  const [mode, setMode] = useState<\"edit\" | \"view\">(\"view\");\n  const [loading, setLoading] = useState(false);\n  const [currentNoteId, setCurrentNoteId] = useState<string | null>(null);\n  const [cachedMdSource, setCachedMdSource] = useState(\"\");\n  const [cachedTitle, setCachedTitle] = useState(\"\");\n  const [noteItems, setNoteItems] = useState<NoteItems>(defaultNotes);\n  const [decryptedMd, setDecryptedMd] = useState(\"\");\n\n  const createNewNote = () => {\n    const newNoteId = uuidv4();\n    const newNoteItems = {\n      ...noteItems,\n      [newNoteId]: {\n        title: \"New untitled note\",\n        markdownSource: \"\"\n      }\n    };\n\n    setCurrentNoteId(newNoteId);\n    setNoteItems(newNoteItems);\n    editNoteById(newNoteId, newNoteItems);\n  };\n\n  const deleteNote = (noteId: string) => {\n    setCurrentNoteId(null);\n    setMode(\"view\");\n\n    const newNoteItems = {\n      ...noteItems\n    };\n\n    delete newNoteItems[noteId];\n\n    setNoteItems(newNoteItems);\n  };\n\n  const saveById = (noteId: string, mdValue: string, titleValue: string) => {\n    setLoading(true);\n    encrypt(mdValue).then(encrypted => {\n      const newNoteItems = {\n        ...noteItems\n      };\n\n      newNoteItems[noteId].markdownSource = encrypted;\n      newNoteItems[noteId].title = titleValue;\n\n      setNoteItems(newNoteItems);\n      setMode(\"view\");\n      setLoading(false);\n\n      // show the edited md value back\n      setDecryptedMd(mdValue);\n    });\n  };\n\n  const editNoteById = (noteId: string, stateNotes: NoteItems) => {\n    setCachedMdSource(stateNotes[noteId].markdownSource);\n    setCachedTitle(stateNotes[noteId].title);\n    setMode(\"edit\");\n  };\n\n  const chooseNote = (noteId: string) => {\n    setLoading(true);\n    setCurrentNoteId(noteId);\n    decrypt(noteItems[noteId].markdownSource).then(decrypted => {\n      setLoading(false);\n      setDecryptedMd(decrypted);\n    });\n  };\n\n  let contentToRender;\n\n  if (currentNoteId === null || noteItems[currentNoteId] === undefined) {\n    contentToRender = <Empty>no note selected</Empty>;\n  } else if (loading) {\n    contentToRender = (\n      <Loading>\n        <img src={loadingSvg} />\n      </Loading>\n    );\n  } else {\n    contentToRender = (\n      <DisplayNotePanel\n        markdownSource={decryptedMd}\n        title={noteItems[currentNoteId].title}\n        mode={mode}\n        cachedMdSource={cachedMdSource}\n        setCachedMdSource={setCachedMdSource}\n        cachedTitle={cachedTitle}\n        setCachedTitle={setCachedTitle}\n        onSave={() => {\n          saveById(currentNoteId, cachedMdSource, cachedTitle);\n        }}\n        onDelete={() => deleteNote(currentNoteId)}\n        onClickView={() => {\n          setMode(\"view\");\n          chooseNote(currentNoteId);\n        }}\n        onClickEdit={() => editNoteById(currentNoteId, noteItems)}\n      />\n    );\n  }\n\n  return (\n    <Container>\n      <Header>\n        <NewNote disabled={mode === \"edit\"} onClick={() => createNewNote()}>\n          + New Note\n        </NewNote>\n      </Header>\n      <Main>\n        <ChooseNotePanel>\n          {Object.entries(noteItems).map(([id, item]) => (\n            <Note\n              key={id}\n              onClick={() => chooseNote(id)}\n              disabled={mode === \"edit\"}\n            >\n              {item.title}\n            </Note>\n          ))}\n        </ChooseNotePanel>\n        {contentToRender}\n      </Main>\n    </Container>\n  );\n}\n\nexport default App;\n\nconst Container = styled.div`\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Header = styled.div`\n  border: 4px solid black;\n  background: grey;\n  padding: 20px;\n`;\n\nconst NewNote = styled.button``;\n\nconst Main = styled.div`\n  flex-grow: 1;\n  display: flex;\n`;\n\nconst ChooseNotePanel = styled.div`\n  border: 4px solid black;\n  border-top: 0;\n  flex-grow: 1;\n  flex-shrink: 0;\n  flex-basis: 0px;\n`;\n\nconst Empty = styled.div`\n  flex-grow: 1;\n  flex-shrink: 0;\n  flex-basis: 0px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Loading = styled.div`\n  flex-grow: 1;\n  flex-shrink: 0;\n  flex-basis: 0px;\n  display: flex;\n  flex-direction: column;\n  background: rgba(200, 200, 200);\n\n  align-items: center;\n  justify-content: center;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App/index\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}